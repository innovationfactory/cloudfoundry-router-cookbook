#TODO: how to make this internal location totally transparent to outside
location = /vcapuls {
  internal;
  # We should use rewrite_by_lua to scrub subrequest headers
  # as uls doesn't care those headers at all.
  # Given there are some exceptions to clear some headers,
  # we just leave them as is.

  proxy_pass http://unix:<%= node['cloudfoundry_router']['socket_file'] %>:/;
}

location / {
  access_log   <%= node['cloudfoundry_common']['log_dir'] %>/nginx_router_access.log main;
  proxy_buffering             off;
  proxy_set_header            Host $host;
  proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_redirect              off;
  proxy_connect_timeout       10;
  proxy_send_timeout          120;
  proxy_read_timeout          120;

  set $health_monitor '';
  set $app_id 0;
  if ($http_user_agent = "HTTP-Monitor/1.1") {
    set $health_monitor T;
  }
  if ($http_host = "") {
    set $health_monitor "${health_monitor}T";
  }
  if ($health_monitor = TT) {
    # Trigger a subrequest to sync the latest few stats of the worker to uls,
    # if we have multiple workers, there will be still few stats not synced for
    # the workers which don't get this monitor request.
    access_by_lua '
    local uls = require ("uls")

    ngx.log(ngx.DEBUG, "monitor trigger stats syncup")

    local req = uls.generate_stats_request()

    -- generate one subrequest to uls to update stats
    ngx.location.capture(
    "/vcapuls", { body = req }
    )
    ';

    more_set_input_headers "Authorization: Basic <%= Base64.encode64("#{node['nginx']['status_user']}:#{node['nginx']['status_passwd']}").strip %>";
    rewrite ^.*$ /healthz break;
    proxy_pass                 http://router_status;
  }

  # We intend to have one "if" block to avoid the above monitor location
  # to twist with below upstream locator server handling.
  # ("if" block effectively creates a nested location and will inherit
  # all the rewrite/access phase handlers of outer location)
  if ($health_monitor != TT) {
    # The following variables are used by lua module code.
    # DO NOT remove or rename any of them!
    set $backend_addr ''; # Backend server address returned from uls for this request
    set $uls_req_tags ''; # Request tags returned from uls for this request to catalog statistics
    set $router_ip '';
    set $timestamp 0;
    set $trace '';
    set $sticky '';

    access_by_lua '
    local uls = require ("uls")

    uls.pre_process_subrequest(ngx, "<%= node['cloudfoundry_router']['trace_key'] %>")
    local req = uls.generate_uls_request(ngx)

    -- generate one subrequest to uls for querying
    local res = ngx.location.capture(
    "/vcapuls", { body = req }
    )

    uls.post_process_subrequest(ngx, res)
    ';

    proxy_pass http://$backend_addr;

    # Handling response from backend servers
    header_filter_by_lua '
    local uls = require ("uls")

    uls.post_process_response(ngx)
    ';
  }
}
